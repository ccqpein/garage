#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '("github-api-cl" "yason") :silent t)
  #+sbcl(sb-ext:enable-debugger)
  )

(defpackage :ros.script.check-if-contribute-today.3810566260
  (:use :cl)
  (:import-from #:github-client :api-client :github-api-call)
  (:import-from #:github-api-doc :api-doc)
  )
(in-package :ros.script.check-if-contribute-today.3810566260)


(defparameter *list-repos-of-me-api*
  (make-instance 'api-doc
                 :api "GET /users/:username/repos"
                 :parameters '(("type" "string") 
                               ("sort" "string") 
                               ("direction" "string")
                               ("per_page" "integer")
                               ("page" "integer"))))

(defparameter *repos-commits*
  (make-instance 'api-doc
                 :api "GET /repos/:owner/:repo/commits"
                 :parameters '(("since" "string")
                               ("per_page" "integer")
                               ("page" "integer"))))

(defun get-all-repos-names (client)
  (loop for repo in (yason:parse
                     (github-api-call
                      client
                      *list-repos-of-me-api*
                      :username "ccqpein"
                      :type "owner"
                      :sort "updated"
                      ))
        collect (gethash "name" repo)))

(defun if-repos-has-commit-since (client repos since)
  (loop
    for repo-name in repos
    for repo-data = (github-api-call
                     client
                     *repos-commits*
                     :owner "ccqpein"
                     :repo repo-name
                     :since since
                     )
    if (not (zerop (length (yason:parse repo-data))))
      do (return t) ;; return if find any
    finally (return nil)))

(defun if-I-commit-today ()
  (let* ((client (make-instance 'api-client))
         )
    (let* ((univeral-l (multiple-value-list
                        (decode-universal-time ; decode the start of today's UTC time
                         (apply #'encode-universal-time ; encode the start of today's time, current timezone
                                (append '(0 0 0) ; sec min hour
                                        (subseq (multiple-value-list
                                                 (get-decoded-time))
                                                3 6) ; day month year
                                        ))
                         0)))
           (time-stamp (format nil "~d-~2,'0d-~2,'0dT~2,'0d:~2,'0d:~2,'0dZ"
                               (nth 5 univeral-l)
                               (nth 4 univeral-l)
                               (nth 3 univeral-l)
                               (nth 2 univeral-l)
                               (nth 1 univeral-l)
                               (nth 0 univeral-l)))
           )
      (format t "Timestamp is ~a~%" time-stamp)
      (if (if-repos-has-commit-since client
                                     (get-all-repos-names client)
                                     time-stamp)
          (format t "You have commit today~%")
          (format t "You haven't commit today~%")))))

(defun main (&rest argv)
  (declare (ignore argv))
  (if-I-commit-today))
