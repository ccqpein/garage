* SQLisp

just want to write sql in lisp. maybe it is a bit more readable, I don't know.

** Keywords

*** CREATE

#+begin_quote
CREATE DATABASE database_name;
#+end_quote

#+begin_quote
(create (:database customer))
#+end_quote

#+begin_quote
CREATE TABLE Customer (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(50),
    LastName VARCHAR(50),
    Country VARCHAR(50),
    Age INT CHECK (Age >= 0 AND Age <= 99),
    Phone INT(10)
);
#+end_quote

#+begin_src lisp
(create '(:table "customer"
          :columns
          (("CustomerID" uuid :primary-key)
           ("CustomerName" (varchar 50))
           ("LastName" (varchar 50))
           ("Age" int)
           ("Phone" (int 10))
           ;;(Age int :check (Age >= 0 AND Age <= 99)) ;; not now
           )))
#+end_src

#+begin_quote
CREATE TABLE NewTable AS
SELECT column1, column2
FROM ExistingTable
WHERE condition;
#+end_quote

#+begin_src lisp
(create '(:table "NewTable"
          :as
          (select ("column1" "column2") :from "ExistingTable" :where (< "column1" 10))))
#+end_src

#+begin_src lisp
  (create '(:index "index_name"
            :on "table_name"
            :columns ("column1" "column2" "column3")))
#+end_src

#+begin_src lisp
(create '(:view "view_name"
          :as
          (select ("column1" "column2") :from "ExistingTable" :where (< "column1" 10))))
#+end_src

*** Where conditions

#+begin_quote
SELECT *
FROM Products
WHERE Category = 'Electronics';
#+end_quote

#+begin_src lisp
(create '(:table "NewTable"
          :as
          (select ("column1" "column2") :from "ExistingTable" :where (< "column1" 10))))
#+end_src

#+begin_quote
WHERE Department <> 'Sales';
#+end_quote

*** SELECT

#+begin_quote
SELECT *
FROM Employees;
#+end_quote

#+begin_src lisp
  (select '* :from "Employees")
  (select "*" :from "Employees")
#+end_src

#+begin_quote
SELECT FirstName, LastName, Email
FROM Customers;
#+end_quote

#+begin_src lisp
  (select '("FirstName" "LastName" "Email") :from "Customers")
#+end_src

#+begin_quote
SELECT
    ProductName AS ItemName,
    Price AS UnitPrice
FROM Products;
#+end_quote

#+begin_src lisp
  (select '(("ProductName" :as "ItemName") ("Price" :as "UnitPrice")) :from "Products")
#+end_src

#+begin_quote
SELECT
    o.OrderID,
    c.CustomerName
FROM Orders AS o
JOIN Customers AS c ON o.CustomerID = c.CustomerID;
#+end_quote

#+begin_src lisp
  (select '(("OrderID" :from "o") ("CustomerName" :from "c"))
          :from (join '(("Orders" :as "o")
                        ("Customers" :as "c"
                                     :on (=
                                          ("c" . "CustomerID")
                                          ("o" . "CustomerID"))))))
#+end_src

#+begin_quote
SELECT DISTINCT Country
FROM Customers;
#+end_quote

#+begin_src lisp
  (select '(("Country" :DISTINCT t)) :from "Customers")
#+end_src

#+begin_quote
SELECT ProductName, Price
FROM Products
WHERE Category = 'Electronics' AND Price > 500;
#+end_quote

#+begin_src lisp
  (select '("ProductName" "Price") 
          :from "Products" 
          :where '(and
                   (= "Category" "Electronics")
                   (> "Price" 500)))
#+end_src
