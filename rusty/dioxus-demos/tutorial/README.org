* README

this is the hand on learning of ~Dioxus~ tutorial

** setup

#+begin_src shell
dx new hot_dog
#+end_src

I pretty like the ~dx~ command, like rustup, I can choose the template.

** run

#+begin_src shell
  cd hot_dog
  dx serve
#+end_src

the files inside the hot_dog

#+begin_quote
.
├── assets
│   ├── favicon.ico
│   ├── header.svg
│   └── main.css
├── Cargo.toml
├── clippy.toml
├── Dioxus.toml
├── README.md
└── src
    └── main.rs
#+end_quote

open the [[http://127.0.0.1:8080][link]] and there is the demo page

I am curiouse about the macro expand:

#+begin_quote
#[allow(non_snake_case)]
fn App() -> Element {
    {
        dioxus_core::internal::verify_component_called_as_component(App);
        {
            dioxus_core::Element::Ok({
                fn __original_template() -> &'static dioxus_core::internal::HotReloadedTemplate {
                    static __ORIGINAL_TEMPLATE: ::std::sync::OnceLock<
                        dioxus_core::internal::HotReloadedTemplate,
                    > = ::std::sync::OnceLock::new();
                    if __ORIGINAL_TEMPLATE.get().is_none() {
                        _ = __ORIGINAL_TEMPLATE
                            .set(
                                dioxus_core::internal::HotReloadedTemplate::new(
                                    None,
                                    <[_]>::into_vec(
                                        ::alloc::boxed::box_new([
                                            dioxus_core::internal::HotReloadDynamicNode::Dynamic(
                                                0usize,
                                            ),
                                            dioxus_core::internal::HotReloadDynamicNode::Dynamic(
                                                1usize,
                                            ),
                                            dioxus_core::internal::HotReloadDynamicNode::Dynamic(2usize),
                                        ]),
                                    ),
                                    ::alloc::vec::Vec::new(),
                                    <[_]>::into_vec(
                                        ::alloc::boxed::box_new([
                                            dioxus_core::internal::HotReloadLiteral::Fmted(
                                                dioxus_core::internal::FmtedSegments::new(
                                                    <[_]>::into_vec(
                                                        ::alloc::boxed::box_new([
                                                            dioxus_core::internal::FmtSegment::Literal {
                                                                value: "icon",
                                                            },
                                                        ]),
                                                    ),
                                                ),
                                            ),
                                            dioxus_core::internal::HotReloadLiteral::Fmted(
                                                dioxus_core::internal::FmtedSegments::new(
                                                    <[_]>::into_vec(
                                                        ::alloc::boxed::box_new([
                                                            dioxus_core::internal::FmtSegment::Literal {
                                                                value: "stylesheet",
                                                            },
                                                        ]),
                                                    ),
                                                ),
                                            ),
                                        ]),
                                    ),
                                    __TEMPLATE_ROOTS,
                                ),
                            );
                    }
                    __ORIGINAL_TEMPLATE.get().unwrap()
                }
                let __template_read = {
                    static __NORMALIZED_FILE: &'static str = {
                        const PATH: &str = ::const_format::pmr::__AssertStr {
                            x: {
                                const ARGS_OSRCTFL4A: ::const_format::__str_methods::ReplaceInput = ::const_format::__str_methods::ReplaceInputConv(
                                        "src/main.rs",
                                        "\\\\",
                                        "/",
                                    )
                                    .conv();
                                {
                                    const OB: &[::const_format::pmr::u8; ARGS_OSRCTFL4A
                                        .replace_length()] = &ARGS_OSRCTFL4A.replace();
                                    const OS: &::const_format::pmr::str = unsafe {
                                        {
                                            let bytes: &'static [::const_format::pmr::u8] = OB;
                                            let string: &'static ::const_format::pmr::str = {
                                                ::const_format::__hidden_utils::PtrToRef {
                                                    ptr: bytes as *const [::const_format::pmr::u8] as *const str,
                                                }
                                                    .reff
                                            };
                                            string
                                        }
                                    };
                                    OS
                                }
                            },
                        }
                            .x;
                        ::const_format::pmr::__AssertStr {
                            x: {
                                const ARGS_OSRCTFL4A: ::const_format::__str_methods::ReplaceInput = ::const_format::__str_methods::ReplaceInputConv(
                                        PATH,
                                        '\\',
                                        "/",
                                    )
                                    .conv();
                                {
                                    const OB: &[::const_format::pmr::u8; ARGS_OSRCTFL4A
                                        .replace_length()] = &ARGS_OSRCTFL4A.replace();
                                    const OS: &::const_format::pmr::str = unsafe {
                                        {
                                            let bytes: &'static [::const_format::pmr::u8] = OB;
                                            let string: &'static ::const_format::pmr::str = {
                                                ::const_format::__hidden_utils::PtrToRef {
                                                    ptr: bytes as *const [::const_format::pmr::u8] as *const str,
                                                }
                                                    .reff
                                            };
                                            string
                                        }
                                    };
                                    OS
                                }
                            },
                        }
                            .x
                    };
                    static __TEMPLATE: GlobalSignal<
                        Option<dioxus_core::internal::HotReloadedTemplate>,
                    > = GlobalSignal::with_location(
                        || None::<dioxus_core::internal::HotReloadedTemplate>,
                        __NORMALIZED_FILE,
                        13u32,
                        5u32,
                        0usize,
                    );
                    dioxus_core::Runtime::current().ok().map(|_| __TEMPLATE.read())
                };
                let __template_read = match __template_read
                    .as_ref()
                    .map(|__template_read| __template_read.as_ref())
                {
                    Some(Some(__template_read)) => &__template_read,
                    _ => __original_template(),
                };
                let mut __dynamic_literal_pool = dioxus_core::internal::DynamicLiteralPool::new(
                    ::alloc::vec::Vec::new(),
                );
                let __dynamic_nodes: [dioxus_core::DynamicNode; 3usize] = [
                    dioxus_core::DynamicNode::Component({
                        use dioxus_core::prelude::Properties;
                        let __comp = ({
                            fc_to_builder(document::Link)
                                .rel({
                                    {
                                        __dynamic_literal_pool
                                            .component_property(0usize, &*__template_read, "icon")
                                    }
                                })
                                .href(FAVICON)
                                .build()
                        })
                            .into_vcomponent(document::Link);
                        __comp
                    }),
                    dioxus_core::DynamicNode::Component({
                        use dioxus_core::prelude::Properties;
                        let __comp = ({
                            fc_to_builder(document::Link)
                                .rel({
                                    {
                                        __dynamic_literal_pool
                                            .component_property(1usize, &*__template_read, "stylesheet")
                                    }
                                })
                                .href(MAIN_CSS)
                                .build()
                        })
                            .into_vcomponent(document::Link);
                        __comp
                    }),
                    dioxus_core::DynamicNode::Component({
                        use dioxus_core::prelude::Properties;
                        let __comp = ({ fc_to_builder(Hero).build() })
                            .into_vcomponent(Hero);
                        __comp
                    }),
                ];
                let __dynamic_attributes: [Box<[dioxus_core::Attribute]>; 0usize] = [];
                #[doc(hidden)]
                static __TEMPLATE_ROOTS: &[dioxus_core::TemplateNode] = &[
                    dioxus_core::TemplateNode::Dynamic {
                        id: 0usize,
                    },
                    dioxus_core::TemplateNode::Dynamic {
                        id: 1usize,
                    },
                    dioxus_core::TemplateNode::Dynamic {
                        id: 2usize,
                    },
                ];
                {
                    let mut __dynamic_value_pool = dioxus_core::internal::DynamicValuePool::new(
                        Vec::from(__dynamic_nodes),
                        Vec::from(__dynamic_attributes),
                        __dynamic_literal_pool,
                    );
                    __dynamic_value_pool.render_with(__template_read)
                }
            })
        }
    }
}
#[allow(non_snake_case)]
#[doc(hidden)]
mod App_completions {
    #[doc(hidden)]
    #[allow(non_camel_case_types)]
    /// This enum is generated to help autocomplete the braces after the component. It does nothing
    pub enum Component {
        App {},
    }
}
#[allow(unused)]
use App_completions::Component::App;
#[allow(non_snake_case)]
pub fn Hero() -> Element {
    {
        dioxus_core::internal::verify_component_called_as_component(Hero);
        {
            dioxus_core::Element::Ok({
                fn __original_template() -> &'static dioxus_core::internal::HotReloadedTemplate {
                    static __ORIGINAL_TEMPLATE: ::std::sync::OnceLock<
                        dioxus_core::internal::HotReloadedTemplate,
                    > = ::std::sync::OnceLock::new();
                    if __ORIGINAL_TEMPLATE.get().is_none() {
                        _ = __ORIGINAL_TEMPLATE
                            .set(
                                dioxus_core::internal::HotReloadedTemplate::new(
                                    None,
                                    ::alloc::vec::Vec::new(),
                                    <[_]>::into_vec(
                                        ::alloc::boxed::box_new([
                                            dioxus_core::internal::HotReloadDynamicAttribute::Dynamic(
                                                0usize,
                                            ),
                                        ]),
                                    ),
                                    ::alloc::vec::Vec::new(),
                                    __TEMPLATE_ROOTS,
                                ),
                            );
                    }
                    __ORIGINAL_TEMPLATE.get().unwrap()
                }
                let __template_read = {
                    static __NORMALIZED_FILE: &'static str = {
                        const PATH: &str = ::const_format::pmr::__AssertStr {
                            x: {
                                const ARGS_OSRCTFL4A: ::const_format::__str_methods::ReplaceInput = ::const_format::__str_methods::ReplaceInputConv(
                                        "src/main.rs",
                                        "\\\\",
                                        "/",
                                    )
                                    .conv();
                                {
                                    const OB: &[::const_format::pmr::u8; ARGS_OSRCTFL4A
                                        .replace_length()] = &ARGS_OSRCTFL4A.replace();
                                    const OS: &::const_format::pmr::str = unsafe {
                                        {
                                            let bytes: &'static [::const_format::pmr::u8] = OB;
                                            let string: &'static ::const_format::pmr::str = {
                                                ::const_format::__hidden_utils::PtrToRef {
                                                    ptr: bytes as *const [::const_format::pmr::u8] as *const str,
                                                }
                                                    .reff
                                            };
                                            string
                                        }
                                    };
                                    OS
                                }
                            },
                        }
                            .x;
                        ::const_format::pmr::__AssertStr {
                            x: {
                                const ARGS_OSRCTFL4A: ::const_format::__str_methods::ReplaceInput = ::const_format::__str_methods::ReplaceInputConv(
                                        PATH,
                                        '\\',
                                        "/",
                                    )
                                    .conv();
                                {
                                    const OB: &[::const_format::pmr::u8; ARGS_OSRCTFL4A
                                        .replace_length()] = &ARGS_OSRCTFL4A.replace();
                                    const OS: &::const_format::pmr::str = unsafe {
                                        {
                                            let bytes: &'static [::const_format::pmr::u8] = OB;
                                            let string: &'static ::const_format::pmr::str = {
                                                ::const_format::__hidden_utils::PtrToRef {
                                                    ptr: bytes as *const [::const_format::pmr::u8] as *const str,
                                                }
                                                    .reff
                                            };
                                            string
                                        }
                                    };
                                    OS
                                }
                            },
                        }
                            .x
                    };
                    static __TEMPLATE: GlobalSignal<
                        Option<dioxus_core::internal::HotReloadedTemplate>,
                    > = GlobalSignal::with_location(
                        || None::<dioxus_core::internal::HotReloadedTemplate>,
                        __NORMALIZED_FILE,
                        23u32,
                        5u32,
                        0usize,
                    );
                    dioxus_core::Runtime::current().ok().map(|_| __TEMPLATE.read())
                };
                let __template_read = match __template_read
                    .as_ref()
                    .map(|__template_read| __template_read.as_ref())
                {
                    Some(Some(__template_read)) => &__template_read,
                    _ => __original_template(),
                };
                let mut __dynamic_literal_pool = dioxus_core::internal::DynamicLiteralPool::new(
                    ::alloc::vec::Vec::new(),
                );
                let __dynamic_nodes: [dioxus_core::DynamicNode; 0usize] = [];
                let __dynamic_attributes: [Box<[dioxus_core::Attribute]>; 1usize] = [
                    Box::new([
                        {
                            dioxus_core::Attribute::new(
                                dioxus_elements::img::src.0,
                                HEADER_SVG,
                                dioxus_elements::img::src.1,
                                dioxus_elements::img::src.2,
                            )
                        },
                    ]),
                ];
                #[doc(hidden)]
                static __TEMPLATE_ROOTS: &[dioxus_core::TemplateNode] = &[
                    {
                        dioxus_core::TemplateNode::Element {
                            tag: dioxus_elements::elements::div::TAG_NAME,
                            namespace: dioxus_elements::div::NAME_SPACE,
                            attrs: &[
                                dioxus_core::TemplateAttribute::Static {
                                    name: dioxus_elements::div::id.0,
                                    namespace: dioxus_elements::div::id.1,
                                    value: "hero",
                                },
                            ],
                            children: &[
                                {
                                    dioxus_core::TemplateNode::Element {
                                        tag: dioxus_elements::elements::img::TAG_NAME,
                                        namespace: dioxus_elements::img::NAME_SPACE,
                                        attrs: &[
                                            dioxus_core::TemplateAttribute::Dynamic {
                                                id: 0usize,
                                            },
                                            dioxus_core::TemplateAttribute::Static {
                                                name: dioxus_elements::img::id.0,
                                                namespace: dioxus_elements::img::id.1,
                                                value: "header",
                                            },
                                        ],
                                        children: &[],
                                    }
                                },
                                {
                                    dioxus_core::TemplateNode::Element {
                                        tag: dioxus_elements::elements::div::TAG_NAME,
                                        namespace: dioxus_elements::div::NAME_SPACE,
                                        attrs: &[
                                            dioxus_core::TemplateAttribute::Static {
                                                name: dioxus_elements::div::id.0,
                                                namespace: dioxus_elements::div::id.1,
                                                value: "links",
                                            },
                                        ],
                                        children: &[
                                            {
                                                dioxus_core::TemplateNode::Element {
                                                    tag: dioxus_elements::elements::a::TAG_NAME,
                                                    namespace: dioxus_elements::a::NAME_SPACE,
                                                    attrs: &[
                                                        dioxus_core::TemplateAttribute::Static {
                                                            name: dioxus_elements::a::href.0,
                                                            namespace: dioxus_elements::a::href.1,
                                                            value: "https://dioxuslabs.com/learn/0.6/",
                                                        },
                                                    ],
                                                    children: &[
                                                        dioxus_core::TemplateNode::Text {
                                                            text: "📚 Learn Dioxus",
                                                        },
                                                    ],
                                                }
                                            },
                                            {
                                                dioxus_core::TemplateNode::Element {
                                                    tag: dioxus_elements::elements::a::TAG_NAME,
                                                    namespace: dioxus_elements::a::NAME_SPACE,
                                                    attrs: &[
                                                        dioxus_core::TemplateAttribute::Static {
                                                            name: dioxus_elements::a::href.0,
                                                            namespace: dioxus_elements::a::href.1,
                                                            value: "https://dioxuslabs.com/awesome",
                                                        },
                                                    ],
                                                    children: &[
                                                        dioxus_core::TemplateNode::Text {
                                                            text: "🚀 Awesome Dioxus",
                                                        },
                                                    ],
                                                }
                                            },
                                            {
                                                dioxus_core::TemplateNode::Element {
                                                    tag: dioxus_elements::elements::a::TAG_NAME,
                                                    namespace: dioxus_elements::a::NAME_SPACE,
                                                    attrs: &[
                                                        dioxus_core::TemplateAttribute::Static {
                                                            name: dioxus_elements::a::href.0,
                                                            namespace: dioxus_elements::a::href.1,
                                                            value: "https://github.com/dioxus-community/",
                                                        },
                                                    ],
                                                    children: &[
                                                        dioxus_core::TemplateNode::Text {
                                                            text: "📡 Community Libraries",
                                                        },
                                                    ],
                                                }
                                            },
                                            {
                                                dioxus_core::TemplateNode::Element {
                                                    tag: dioxus_elements::elements::a::TAG_NAME,
                                                    namespace: dioxus_elements::a::NAME_SPACE,
                                                    attrs: &[
                                                        dioxus_core::TemplateAttribute::Static {
                                                            name: dioxus_elements::a::href.0,
                                                            namespace: dioxus_elements::a::href.1,
                                                            value: "https://github.com/DioxusLabs/sdk",
                                                        },
                                                    ],
                                                    children: &[
                                                        dioxus_core::TemplateNode::Text {
                                                            text: "⚙\u{fe0f} Dioxus Development Kit",
                                                        },
                                                    ],
                                                }
                                            },
                                            {
                                                dioxus_core::TemplateNode::Element {
                                                    tag: dioxus_elements::elements::a::TAG_NAME,
                                                    namespace: dioxus_elements::a::NAME_SPACE,
                                                    attrs: &[
                                                        dioxus_core::TemplateAttribute::Static {
                                                            name: dioxus_elements::a::href.0,
                                                            namespace: dioxus_elements::a::href.1,
                                                            value: "https://marketplace.visualstudio.com/items?itemName=DioxusLabs.dioxus",
                                                        },
                                                    ],
                                                    children: &[
                                                        dioxus_core::TemplateNode::Text {
                                                            text: "💫 VSCode Extension",
                                                        },
                                                    ],
                                                }
                                            },
                                            {
                                                dioxus_core::TemplateNode::Element {
                                                    tag: dioxus_elements::elements::a::TAG_NAME,
                                                    namespace: dioxus_elements::a::NAME_SPACE,
                                                    attrs: &[
                                                        dioxus_core::TemplateAttribute::Static {
                                                            name: dioxus_elements::a::href.0,
                                                            namespace: dioxus_elements::a::href.1,
                                                            value: "https://discord.gg/XgGxMSkvUM",
                                                        },
                                                    ],
                                                    children: &[
                                                        dioxus_core::TemplateNode::Text {
                                                            text: "👋 Community Discord",
                                                        },
                                                    ],
                                                }
                                            },
                                        ],
                                    }
                                },
                            ],
                        }
                    },
                ];
                {
                    let mut __dynamic_value_pool = dioxus_core::internal::DynamicValuePool::new(
                        Vec::from(__dynamic_nodes),
                        Vec::from(__dynamic_attributes),
                        __dynamic_literal_pool,
                    );
                    __dynamic_value_pool.render_with(__template_read)
                }
            })
        }
    }
}
#[allow(non_snake_case)]
#[doc(hidden)]
mod Hero_completions {
    #[doc(hidden)]
    #[allow(non_camel_case_types)]
    /// This enum is generated to help autocomplete the braces after the component. It does nothing
    pub enum Component {
        Hero {},
    }
}

#+end_quote
