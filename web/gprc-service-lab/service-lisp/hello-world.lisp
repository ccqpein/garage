;;; hello.proto.lisp
;;;
;;; Generated by the protocol buffer compiler. DO NOT EDIT!

(cl:in-package #:common-lisp-user)

#+sbcl
(cl:progn
 (cl:eval-when (:compile-toplevel) (sb-ext:restrict-compiler-policy 'cl:debug 0 1))
 (cl:declaim (cl:optimize (sb-c:store-coverage-data 0))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.HELLO")
    (cl:defpackage "CL-PROTOBUFS.HELLO" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
  (cl:unless (cl:find-package "CL-PROTOBUFS.HELLO-RPC")
    (cl:defpackage "CL-PROTOBUFS.HELLO-RPC" (:use)
                   (:local-nicknames (#:pi #:cl-protobufs.implementation)))))

(cl:in-package "CL-PROTOBUFS.HELLO")

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:define-schema 'hello
    :syntax :proto3
    :package "hello")
)


;;; Top-Level messages

(pi:define-message hello-request
    ()
  ;; Fields
  (client-type
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "clientType")
  (message-body
   :index 2 :type cl:string :kind :scalar :label (:optional) :json-name "messageBody"))

(pi:define-message hello-response
    ()
  ;; Fields
  (message-body
   :index 1 :type cl:string :kind :scalar :label (:optional) :json-name "messageBody"))

;;; Services
(pi:define-service hello-world
    (:source-location #P"hello.proto")
  (say-hello (
    hello-request =>
    hello-response)))

(cl:eval-when (:compile-toplevel :load-toplevel :execute)
(pi:add-file-descriptor #P"hello.proto" 'hello)
)

(cl:export '(client-type
             hello
             hello-request
             hello-response
             hello-world
             message-body))

(cl:in-package "CL-PROTOBUFS.HELLO-RPC")

(cl:export '(call-say-hello
             say-hello))
